generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id
  email     String   @unique
  username  String   @unique
  password  String
  role      Role     @default(NORMAL)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  UserAnime       UserAnimeList[]
  UserFavorite    FavoriteAnime[]
  UserAnimeStatus UserAnimeStatus[]
  UserAnimeRating AnimeReview[]
  Session         Session[]
}

model UserAnimeList {
  id        String   @id
  userId    String
  animeId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, animeId])
}

model UserAnimeStatus {
  id      String      @id
  userId  String
  animeId Int
  status  WatchStatus

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, animeId])
}

model AnimeReview {
  id        String   @id
  userId    String
  animeId   Int
  rating    Int
  text      String?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, animeId])
}

model FavoriteAnime {
  id      String @id
  userId  String
  animeId Int

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, animeId])
}

model Session {
  id        String   @id
  userId    String
  createdAt DateTime @default(now())
  expiresAt DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  NORMAL
  ADMIN
}

enum WatchStatus {
  WATCHING
  TO_WATCH
  COMPLETED
}
